use fitsio::images::{ImageDescription, ImageType};
use fitsio::FitsFile;
use fitsrs::fits::Fits;
use ndarray::{s, Array, ArrayD, Axis};
use wcs::{LonLat, WCS};

use std::fs::File;
use std::io::{Cursor, Read};

//use plotters::prelude::*;

//const OUT_FILE_NAME: &str = "matshow.png";

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let mut f = File::open(
        //"../..//Downloads/cutout-CDS_P_PanSTARRS_DR1_g.fits",
        //"../../Downloads/VLA_lband_2017.fits",
        "../../Downloads/image_full_ampphase_di_m.NS_shift.int.facetRestored.rescaled.fits",
        //"../../Downloads/tail.fits",
    )
    .unwrap();
    let mut buf = Vec::new();
    f.read_to_end(&mut buf).unwrap();
    let mut reader = Cursor::new(&buf[..]);
    let Fits { hdu } = Fits::from_reader(&mut reader).unwrap();
    let header = hdu.get_header();

    let wcs = WCS::new(&header).unwrap();
    //let coord = LonLat::new(216.7489976f64.to_radians(), 34.1999570f64.to_radians());
    let coord = LonLat::new(218.0f64.to_radians(), 34.5f64.to_radians());
    let coord_pix = wcs.proj_lonlat(&coord).unwrap();
    println!(
        "Centring cutout on (x, y) = ({}, {})",
        coord_pix.x() as usize,
        coord_pix.y() as usize
    );

    let mut fptr = FitsFile::open(
        "../../Downloads/image_full_ampphase_di_m.NS_shift.int.facetRestored.rescaled.fits", //"../..//Downloads/cutout-CDS_P_PanSTARRS_DR1_g.fits"
    )?;
    let hdu = fptr.primary_hdu().unwrap();
    let mut _data: ArrayD<f32> = hdu.read_image(&mut fptr)?;
    // Assume RA and DEC axes are always the last two.
    while _data.shape().len() > 2 {
        _data = _data.remove_axis(Axis(0));
    }
    let rrange = coord_pix.y() as usize + 1 - 500..coord_pix.y() as usize + 501;
    let crange = coord_pix.x() as usize + 1 - 500..coord_pix.x() as usize + 501;
    let _cutout = _data.slice(s![rrange, crange]);

    let img_desc = ImageDescription {
        data_type: ImageType::Float,
        dimensions: &[1000, 1000],
    };
    let mut fptr_new = FitsFile::create("output.fits")
        .with_custom_primary(&img_desc)
        .open()?;
    hdu.write_key(&mut fptr_new, "CRVAL1", 218.0f64)?;
    hdu.write_key(&mut fptr_new, "CRVAL2", 34.5f64)?;

    hdu.write_key(&mut fptr_new, "CRPIX1", 500u64)?;
    hdu.write_key(&mut fptr_new, "CRPIX2", 500u64)?;

    let cdelt1: f64 = hdu.read_key(&mut fptr, "CDELT1").unwrap();
    hdu.write_key(&mut fptr_new, "CDELT1", cdelt1)?;
    let cdelt2: f64 = hdu.read_key(&mut fptr, "CDELT2").unwrap();
    hdu.write_key(&mut fptr_new, "CDELT2", cdelt2)?;

    let ctype1: std::string::String = hdu.read_key(&mut fptr, "CTYPE1").unwrap();
    hdu.write_key(&mut fptr_new, "CTYPE1", ctype1)?;
    let ctype2: std::string::String = hdu.read_key(&mut fptr, "CTYPE2").unwrap();
    hdu.write_key(&mut fptr_new, "CTYPE2", ctype2)?;

    let radesys: std::string::String = hdu.read_key(&mut fptr, "RADESYS").unwrap();
    hdu.write_key(&mut fptr_new, "RADESYS", radesys)?;
    let lonpole: std::string::String = hdu.read_key(&mut fptr, "LONPOLE").unwrap();
    hdu.write_key(&mut fptr_new, "LONPOLE", lonpole)?;
    let latpole: std::string::String = hdu.read_key(&mut fptr, "LATPOLE").unwrap();
    hdu.write_key(&mut fptr_new, "LATPOLE", latpole)?;

    hdu.write_key(&mut fptr_new, "NAXIS1", 1000u64)?;
    hdu.write_key(&mut fptr_new, "NAXIS2", 1000u64)?;
    
    let cutout_flat = Array::from_iter(_cutout.iter().cloned()).to_vec();
    hdu.write_region(&mut fptr_new, &[&(0..1000), &(0..1000)], &cutout_flat)?;
    //hdu.write_image(&mut fptr_new, &_cutout);
    /*
    let root = BitMapBackend::new(OUT_FILE_NAME, (1024, 768)).into_drawing_area();

    root.fill(&WHITE)?;

    let mut chart = ChartBuilder::on(&root)
        //.caption("Matshow Example", ("sans-serif", 80))
        .margin(5)
        .top_x_label_area_size(40)
        .y_label_area_size(40)
        .build_cartesian_2d(0..naxis1, naxis2..0)?;
        //.build_cartesian_2d(0i32..15i32, 15i32..0i32)?;

    chart
        .configure_mesh()
        //.x_labels(15)
        //.y_labels(15)
        .max_light_lines(4)
        //.x_label_offset(35)
        //.y_label_offset(25)
        .disable_x_mesh()
        .disable_y_mesh()
        .label_style(("sans-serif", 20))
        .draw()?;

    let mut matrix = [[0; 15]; 15];

    for i in 0..15 {
        matrix[i][i] = i + 4;
    }

    chart.draw_series(
        matrix
            .iter()
            .zip(0..)
            .flat_map(|(l, y)| l.iter().zip(0..).map(move |(v, x)| (x, y, v)))
            .map(|(x, y, v)| {
                Rectangle::new(
                    [(x, y), (x + 1, y + 1)],
                    HSLColor(
                        240.0 / 360.0 - 240.0 / 360.0 * (*v as f64 / 20.0),
                        0.7,
                        0.1 + 0.4 * *v as f64 / 20.0,
                    )
                    .filled(),
                )
            }),
    )?;

    // To avoid the IO failure being ignored silently, we manually call the present function
    root.present().expect("Unable to write result to file, please make sure 'plotters-doc-data' dir exists under current dir");
    println!("Result has been saved to {}", OUT_FILE_NAME);
    */
    Ok(())
}
